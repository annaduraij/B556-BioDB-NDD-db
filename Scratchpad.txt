Pathology Project [Root Folder]
    App_Authentication
        migrations
            __init__.py
        templates
            login.html
            logout.html
            register.html
        __init__.py
        admin.py
        apps.py
        models.py
        tests.py
        urls.py {
            from django.urls import path

            app_name = 'App_Authentication'

            from .views import (
                LoginView,
                LogoutView,
                RegisterView
            )

            urlpatterns = [
                path('login/', LoginView.as_view(), name='login'),
                path('logout/', LogoutView.as_view(), name='logout'),
                path('register/', RegisterView.as_view(), name='register'),
            ]
        }

        views.py {
            from django.views.generic import TemplateView
            from Common.views import BaseView


            class LoginView(BaseView):
                template_name = 'login.html'


            class LogoutView(BaseView):
                template_name = 'logout.html'


            class RegisterView(BaseView):
                template_name = 'register.html'
        }

    App_Model
        migrations
            __init__.py
        __init__.py
        admin.py {
            from django.contrib import admin
            from .models import Disease, EnvironmentalRiskFactor, GeneticRiskFactor, DiseaseERF, DiseaseGRF


            # @admin.register(<ModelClass>)
            # class <ModelClass>Admin
            #   # Note these Fields are the names of the bound variables in the model, not db columns
            #   list_display = ( <Field1 to Display>, <Field2 to Display>, ... )
            #   search_fields = ( <Field1 to Search Through>, <Field2 to Search Through>, ... )
            #   list_filter = ( <Field1 to Filter By>, <Field2 to Filter By>, ... )
            #   # Note, intersection table fields can use the FK__ForeignField, for example grf_id__snp, gets snp through grf_id
            #   # Note to the Note, but the '__' spanning syntax does not apply to list fields

            @admin.register(Disease)
            class DiseaseAdmin(admin.ModelAdmin):
                list_display = ('name', 'abbreviation')
                search_fields = ('name', 'abbreviation')
                list_filter = ('name', 'abbreviation',)


            @admin.register(EnvironmentalRiskFactor)
            class EnvironmentalRiskFactorAdmin(admin.ModelAdmin):
                list_display = ('name',)
                search_fields = ('name',)


            @admin.register(GeneticRiskFactor)
            class GeneticRiskFactorAdmin(admin.ModelAdmin):
                list_display = ('snp', 'gene', 'trait', 'p_value')
                search_fields = ('snp', 'gene', 'trait')
                list_filter = ('trait', 'gene')


            @admin.register(DiseaseERF)
            class DiseaseERFAdmin(admin.ModelAdmin):
                list_display = ('disease_id', 'erf_id', 'source_DOI')
                search_fields = ('disease_id__name', 'erf_id__name', 'source_DOI')
                list_filter = ('disease_id__name', 'erf_id__name')


            @admin.register(DiseaseGRF)
            class DiseaseGRFAdmin(admin.ModelAdmin):
                list_display = ('disease_id', 'grf_id', 'source_accession')
                search_fields = ('disease_id__name', 'grf_id__snp', 'grf_id__gene', 'grf_id__trait', 'source_accession')
                list_filter = ('disease_id__name', 'grf_id__snp', 'grf_id__gene', 'grf_id__trait',)
        }
        apps.py
        models.py {
            # Set the standard name for ID and Name Columns
            column_ID = 'ID'
            column_Name = 'Name'

            # Set the maximum length of characters universally
            length = {
                'varchar': 255,
                'decimal': {
                    'max_digits': 20,
                    'decimal_places': 19
                },
            }

            # Set the Primary Table Names
            p_tables = {
                # Table Structure
                # <Model> : {
                #    'db': '< Name of Database Table >'
                #    'abbreviation': '< Abbreviation for usage in intersection tables and columns >'
                #    'admin': '< Name of Table in Django >'
                #    'admin_plural': '< Plural Name of Table in Django >',
                #
                #    'pk': '< Name of Primary Key in DB Table >',
                #    'label': '< Name of Human-Readable Identifier in DB Table >',
                # }

                'Disease': {
                    'db': 'Disease',
                    'abbreviation': 'Disease',
                    'admin': 'Disease',
                    'admin_plural': 'Diseases',

                    'pk': column_ID,
                    'label': column_Name,
                },

                'EnvironmentalRiskFactor': {
                    'db': 'Environmental_Risk_Factor',
                    'abbreviation': 'ERF',
                    'admin': 'Environmental Risk Factor (ERF)',
                    'admin_plural': 'Environmental Risk Factors (ERFs)',

                    'pk': column_ID,
                    'label': column_Name,
                },

                'GeneticRiskFactor': {
                    'db': 'Genetic_Risk_Factor',
                    'abbreviation': 'GRF',
                    'admin': 'Genetic Risk Factor (GRF)',
                    'admin_plural': 'Genetic Risk Factors (GRFs)',

                    'pk': column_ID,
                    'label': 'SNP',
                },
            }


            # Function to use the original model names and info to create the intersection model names and info
            # Standardizes the Naming Convention of Intersection Tables in both DB and Admin Panel
            def intersect(primary_model_one, primary_model_two):

                pm1 = p_tables[primary_model_one]
                pm2 = p_tables[primary_model_two]

                i_table_dict = {
                    'db': f"{pm1['abbreviation']}_{pm2['abbreviation']}",
                    'admin': f"{pm1['admin']} >-< {pm2['admin']}",
                    'admin_plural': f"{pm1['admin_plural']} >-< {pm2['admin_plural']}",

                    'fk1': f"{pm1['abbreviation']}_{pm1['pk']}",
                    'fk2': f"{pm2['abbreviation']}_{pm2['pk']}"
                }

                return i_table_dict


            # Set the Intersection / Junction Table Names
            i_tables = {
                # Intersection Tables
                'DiseaseERF': intersect('Disease', 'EnvironmentalRiskFactor'),
                'DiseaseGRF': intersect('Disease', 'GeneticRiskFactor'),
            }

            # Unpack the Primary and Intersection Tables into one Dict
            tables = {
                **p_tables,
                **i_tables
            }


            # Primary Model: Disease
            class Disease(models.Model):
                # ID as an integer primary key, automatically incrementing
                id = models.AutoField(primary_key=True, db_column=tables['Disease']['pk'])
                # Name of Disease as a unique, mandatory character field to ensure no duplicates
                name = models.CharField(max_length=length['varchar'], unique=True, db_column=tables['Disease']['label'])
                # Abbreviation of Disease as an optional character field, duplicates allowed
                abbreviation = models.CharField(max_length=length['varchar'], null=True, db_column='Abbreviation')

                def __str__(self):
                    # Sets Disease Tuples' / Instances' Labels to their respective name
                    return self.name

                # Table Metadata
                class Meta:
                    # Explicitly set the naming of the table in the db
                    db_table = tables['Disease']['db']
                    # Explicitly set the naming of the table in Django
                    verbose_name = tables['Disease']['admin']
                    verbose_name_plural = tables['Disease']['admin_plural']


            # Primary Model: Environmental Risk Factor
            class EnvironmentalRiskFactor(models.Model):
                # ID as an integer primary key, automatically incrementing
                id = models.AutoField(primary_key=True, db_column=tables['EnvironmentalRiskFactor']['pk'])
                # Name of ERF as a unique, mandatory character field to ensure no duplicates
                name = models.CharField(max_length=length['varchar'], unique=True,
                                        db_column=tables['EnvironmentalRiskFactor']['label'])

                def __str__(self):
                    # Sets ERF Tuples' / Instances' Labels to their respective name
                    return self.name

                # Table Metadata
                class Meta:
                    # Explicitly set the naming of the table
                    db_table = tables['EnvironmentalRiskFactor']['db']
                    # Explicitly set the naming of the table in Django
                    verbose_name = tables['EnvironmentalRiskFactor']['admin']
                    verbose_name_plural = tables['EnvironmentalRiskFactor']['admin_plural']


            # Primary Model: Genetic Risk Factor
            class GeneticRiskFactor(models.Model):
                # ID as an integer primary key, automatically incrementing
                id = models.AutoField(primary_key=True, db_column=tables['GeneticRiskFactor']['pk'])
                # SNP Identifier (functionally equivalent to GRF name) as a unique character field to ensure no duplicates
                snp = models.CharField(max_length=length['varchar'], unique=True, db_column=tables['GeneticRiskFactor']['label'])
                # Mapped Gene's Identifier as a mandatory character field, duplicates allowed, transient dependency
                gene = models.CharField(max_length=length['varchar'], db_column='Gene')
                # Reported Trait as an optional character field, duplicates allowed, transient dependency
                trait = models.CharField(max_length=length['varchar'], null=True, blank=True, db_column='Trait')
                # P Value as an optional (but highly recommended) float field, stored in scientific notation
                p_value = models.FloatField(db_column='P_Value', null=True, blank=True)

                # Decimal Field does not have sufficient max length
                # p_value = models.DecimalField(db_column='P_Value', null=True, blank=True,
                #                               decimal_places=length['decimal']['decimal_places'],
                #                               max_digits=length['decimal']['max_digits'])

                def __str__(self):
                    # Sets GRF Tuples' / Instances' Labels to the SNP Identifier
                    return self.snp

                # Table Metadata
                class Meta:
                    # Explicitly set the naming of the table
                    db_table = tables['GeneticRiskFactor']['db']
                    # Explicitly set the naming of the table in Django
                    verbose_name = tables['GeneticRiskFactor']['admin']
                    verbose_name_plural = tables['GeneticRiskFactor']['admin_plural']


            # Intersection Model: Diseases >-< Environmental Risk Factors (ERFs)
            class DiseaseERF(models.Model):
                # Disease ID as FK
                disease_id = models.ForeignKey(Disease, on_delete=models.CASCADE, db_column=tables['DiseaseERF']['fk1'])
                # Environmental Risk Factor ID as FK
                erf_id = models.ForeignKey(EnvironmentalRiskFactor, on_delete=models.CASCADE, db_column=tables['DiseaseERF']['fk2'])
                # Source (DOI of Document) to validate relationship
                source_DOI = models.CharField(max_length=length['varchar'], db_column='Source_DOI')

                # Table Metadata
                class Meta:
                    # Virtual Composite Key enforced via SQL Unique constraints and via Django
                    unique_together = [['disease_id', 'erf_id']]
                    # Explicitly set the naming of the intersection table
                    db_table = tables['DiseaseERF']['db']
                    # Explicitly set the naming of the intersection table in Django
                    verbose_name = tables['DiseaseERF']['admin']
                    verbose_name_plural = tables['DiseaseERF']['admin_plural']


            # Intersection Model: Diseases >-< Genetic Risk Factors (GRFs)
            class DiseaseGRF(models.Model):
                # Disease ID as FK
                disease_id = models.ForeignKey(Disease, on_delete=models.CASCADE, db_column=tables['DiseaseGRF']['fk1'])
                # Genetic Risk Factor ID as FK
                grf_id = models.ForeignKey(GeneticRiskFactor, on_delete=models.CASCADE, db_column=tables['DiseaseGRF']['fk2'])
                # Source (Accession Number of Record) to validate relationship
                source_accession = models.CharField(max_length=length['varchar'], db_column='Source_Accession')

                # Table Metadata
                class Meta:
                    # Virtual Composite Key enforced via SQL Unique constraints and via Django
                    unique_together = [['disease_id', 'grf_id']]
                    # Explicitly set the naming of the intersection table
                    db_table = tables['DiseaseGRF']['db']
                    # Explicitly set the naming of the intersection table in Django
                    verbose_name = tables['DiseaseGRF']['admin']
                    verbose_name_plural = tables['DiseaseGRF']['admin_plural']
        }
        tests.py
        urls.py {
            from django.urls import path

            app_name = 'App_Model'
        }
        views.py {
            from django.views.generic import TemplateView
            from Common.views import BaseView
        }

    App_Query
        migrations
            __init__.py
        templates
            record_details.html  {
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Title</title>
                </head>
                <body>

                </body>
                </html>
            }
            search_input.html {
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Title</title>
                </head>
                <body>

                </body>
                </html>
            }
            search_results.html {
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>Title</title>
                </head>
                <body>

                </body>
                </html>
            }
        __init__.py
        admin.py
        apps.py
        models.py
        tests.py
        urls.py {
            from django.urls import path

            app_name = 'App_Query'

            from .views import (
                SearchInputView,
                SearchResultsView,
                RecordDetailsView
            )

            urlpatterns = [
                path('', SearchInputView.as_view(), name='search_input'),
                path('results/', SearchResultsView.as_view(), name='search_results'),
                path('record/<int:id>/', RecordDetailsView.as_view(), name='record_details'),
            ]
        }
        views.py {
            from django.views.generic import TemplateView
            from Common.views import BaseView


            class SearchInputView(BaseView):
                template_name = 'search_input.html'


            class SearchResultsView(BaseView):
                template_name = 'search_results.html'


            class RecordDetailsView(BaseView):
                template_name = 'record_details.html'
        }

    App_Static_Content
        migrations
            __init__.py
        templates
            about_project.html {
                {% extends 'base.html' %}

                {% block page_title %} About Project {% endblock %}

                {% block page_style %}

                    <style>

                    </style>

                {% endblock %}

                {% block page_content %}

                <!-- Main Content for the About Project Page -->
                <section class="about-project">
                    <h1>About The Neurodegenerative Disorder Pathology Database</h1>
                        <h2> What is the Problem?</h2>
                            <ul>
                                <li> Neurodegenerative disorders are complex diseases with an interlinking of multiple environmental and genetic risk factors which subsequently complicates risk communication and early intervention efforts.</li>
                                <li>The dynamism of risk factors necessitates a comprehensive database that can track risk factors contributing to neurodegenerative disease pathology.</li>
                            </ul>
                        <h2>What Gaps does the NDPD Fill?</h2>
                            <ul>
                                <li>Addresses the challenge of limited accessibility for users without experience in the medical or scientific field.</li>
                                <li>Acts as a bridge between the advancing literature of neurodegenerative diseases and those wishing to investigate their risk for neurodegenerative diseases.</li>
                            </ul>
                        <h2>Our Goal</h2>
                            <p>Provide an accessible and user-friendly database that comprehensively connects multiclass risk factors for neurodegenerative disorders with current information.</p>
                </section>

                {% endblock %}
            }
            about_us.html {
                {% extends 'base.html' %}

                {% block page_title %}About Us{% endblock %}

                {% block page_style %}

                    <style>

                    </style>

                {% endblock %}

                {% block page_content %}

                <!-- Main Content for the About Us Page -->
                <center> <img src="about_us_art.png" width="400" height= "200"> </center>
                <center> <h1>About Us</h1> </center>

                <section class="about-us">
                    <h2>The Team</h2>
                    <ul style="list-style-type:none;">
                        <li>Treyden Stansfield</li>
                        <li>Jay Annadurai</li>
                        <li>Noah Hamilton</li>
                        <li>Ellie Cates</li>
                    </ul>
                </section>

                <section>
                    <h2>What is our goal?</h2>
                    <p>We wish to provide an accessible and user-friendly database that comprehensively connects multiclass risk factors for neurodegenerative disorders with current information.</p>
                </section>

                <section>
                    <a href="about_project.html">Learn more about our project</a>
                </section>

                {% endblock %}
            }
        __init__.py
        admin.py
        apps.py
        models.py
        tests.py
        urls.py {
            from django.urls import path

            app_name = 'App_Static_Content'

            from .views import (
                AboutUsView,
                AboutProjectView
            )

            urlpatterns = [
                path('about-us/', AboutUsView.as_view(), name='about_us'),
                path('about-project/', AboutProjectView.as_view(), name='about_project'),
            ]
        }
        views.py {
            from django.views.generic import TemplateView
            from Common.views import BaseView


            class AboutUsView(BaseView):
                template_name = 'about_us.html'


            class AboutProjectView(BaseView):
                template_name = 'about_project.html'
        }

    Common
        migrations
            __init__.py
        templates
            components
                footer.html {
                    <!-- Footer Component -->
                    <!-- Author: Jay Annadurai-->

                    <style>
                        #footer {
                            display: flex;
                            flex-grow: 1;
                            flex-flow: row wrap;
                            justify-content: space-around
                        }
                        #footer > div {
                            width: calc(100% / {{ footer_info|length }});
                            text-align: center;
                            margin: 0 auto
                        }
                    </style>

                    <footer>
                        <div id="footer" >
                            {% for item_name,footer_item in footer_info.items %}
                                <div class="footer-section"> {{ footer_item }} </div>
                            {% endfor %}
                        </div>
                    </footer>
                }
                navbar.html {
                    <style>
                        #navbar {
                            display: flex;
                            flex-grow: 1;
                            flex-flow: row wrap;
                            justify-content: space-around
                        }
                        #navbar > div {
                            width: calc(100% / {{ nav_pages|length }});
                            text-align: center;
                            margin: 0 auto
                        }
                    </style>


                    <nav>
                        <div id="navbar">
                            {% for page_name, page_url in nav_pages.items %}
                                <div class="nav-section"><a href="{% url page_url %}">{{ page_name }}</a></div>
                            {% endfor %}
                        </div>
                    </nav>
                }
            base.html {
                <!DOCTYPE html>
                <html lang="en">

                <head>
                    <meta charset="UTF-8">
                    <title>NDD Pathology DB - {% block page_title %} Page {% endblock %}</title>
                    <!-- Link to CSS files and other head elements -->
                    {% block page_style %}
                    <style> /* Page-Specific Styles */ </style>
                    {% endblock %}

                </head>

                <body>

                    {% include 'components/navbar.html' %}

                    <main>
                        {% block page_content %}
                        <!-- Body Content of Child Classes  -->
                        {% endblock %}
                    </main>

                    {% include 'components/footer.html' %}

                    <!-- Links to JS files -->
                </body>

                </html>
            }
            list_paths.html {
                <!-- list_paths.html -->

                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>List of Paths</title>
                </head>
                <body>
                    <h1>List of Paths</h1>
                    <ul>
                        {% for path in path_list %}
                            <li>{{ path }}</li>
                        {% endfor %}
                    </ul>
                </body>
                </html>
            }
        __init__.py
        admin.py
        apps.py
        models.py
        tests.py
        views.py {
            from django.views.generic import TemplateView

            from django.shortcuts import render
            from django.urls import get_resolver
            from django.views import View

            # Establishes Base Super View Class
            class BaseView(TemplateView):
                def get_context_data(self, **kwargs):
                    # Call the base implementation first to get a context
                    context = super().get_context_data(**kwargs)

                    # Add in the navigation links to the Various Pages
                    # Must be in form of Page_Name:Page:Path
                    context['nav_pages'] = {
                        # "Home": "App_Static_Content:home",
                        # "Search": "App_Query:search_input",
                        "About Us": "App_Static_Content:about_us",
                        "NDD DB": "App_Static_Content:about_project",
                        # "Login": "App_Authentication:login"
                    }

                    # Set the Items for Footer Info in Order
                    # Note: the key is discarded but exists for readability
                    context['footer_info'] = {
                        "Copyright": "ⓒ NDD Pathology DB 2024",
                        "Authors": "Stanfield T | Annadurai J | Hamilton N | Cate E",
                        "Version": "1.0.0"
                    }

                    # Return the Context for the Template
                    return context


            # Establishes a Debug View Class to View Pages
            class ListPathsView(View):
                def get(self, request):
                    # Get a list of all URL patterns in the Django project
                    url_patterns = get_resolver().url_patterns

                    # Extract path names from the URL patterns
                    path_list = [pattern.pattern._route for pattern in url_patterns]

                    # Render a template with the list of paths
                    return render(request, 'list_paths.html', {'path_list': path_list})
        }

    Pathology_Project
        __init__.py
        asgi.py
        settings.py {
            from pathlib import Path

            # Build paths inside the project like this: BASE_DIR / 'subdir'.
            BASE_DIR = Path(__file__).resolve().parent.parent


            # Quick-start development settings - unsuitable for production
            # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

            # SECURITY WARNING: keep the secret key used in production secret!
            SECRET_KEY = 'django-insecure-gr@rk2oj9ejg)x3ifq8-0q_@k3a*625o)ie22+k+ygsspw64k-'

            # SECURITY WARNING: don't run with debug turned on in production!
            DEBUG = True

            ALLOWED_HOSTS = []


            # Application definition

            INSTALLED_APPS = [
                # Default apps
                'django.contrib.admin',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.messages',
                'django.contrib.staticfiles',

                # Custom apps
                'Common',  # Contains shared resources across all pages
                # 'App_Query',  # Handles the search functionality and displaying results
                # 'App_Model',  # Defines the data models for the application
                # 'App_Authentication',  # Manages user authentication and profiles
                'App_Static_Content',  # Serves static pages like "About Us" and information pages

            ]

            MIDDLEWARE = [
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
                'django.middleware.csrf.CsrfViewMiddleware',
                'django.contrib.auth.middleware.AuthenticationMiddleware',
                'django.contrib.messages.middleware.MessageMiddleware',
                'django.middleware.clickjacking.XFrameOptionsMiddleware',
            ]

            ROOT_URLCONF = 'Pathology_Project.urls'

            TEMPLATES = [
                {
                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
                    'DIRS': [BASE_DIR / 'templates']
                    ,
                    'APP_DIRS': True,
                    'OPTIONS': {
                        'context_processors': [
                            'django.template.context_processors.debug',
                            'django.template.context_processors.request',
                            'django.contrib.auth.context_processors.auth',
                            'django.contrib.messages.context_processors.messages',
                        ],
                    },
                },
            ]

            WSGI_APPLICATION = 'Pathology_Project.wsgi.application'


            # Database
            # https://docs.djangoproject.com/en/5.0/ref/settings/#databases

            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.mysql',
                    'NAME': 'pathology_db',  # Database Name
                    'USER': 'jannadurai',  # Database Access User
                    'PASSWORD': 'jannadurai',  # Database Access Password
                    'HOST': 'localhost',  # Default for Localhost
                    'PORT': '3306',  # Default for MariaDB/MySQL is 3306
                }
            }


            # Password validation
            # https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

            AUTH_PASSWORD_VALIDATORS = [
                {
                    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
                },
            ]


            # Internationalization
            # https://docs.djangoproject.com/en/5.0/topics/i18n/

            LANGUAGE_CODE = 'en-us'

            TIME_ZONE = 'UTC'

            USE_I18N = True

            USE_TZ = True


            # Static files (CSS, JavaScript, Images)
            # https://docs.djangoproject.com/en/5.0/howto/static-files/

            STATIC_URL = 'static/'

            # Default primary key field type
            # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

            DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
        }
        urls.py {
            # Default Imports
            from django.contrib import admin
            from django.urls import path

            # Import the 'Include' to Include App URLs
            from django.urls import include

            # Temporarily Import the AboutProjectView and AboutUsView to set as the home page
            from App_Static_Content.views import AboutProjectView
            from App_Static_Content.views import AboutUsView
            from Common.views import ListPathsView

            urlpatterns = [
                # Admin Path
                path('admin/', admin.site.urls),

                # Custom URL View for listing paths
                path('debug/paths/', ListPathsView.as_view(), name='list_paths'),

                # Home Path temporarily routes to the AboutProjectView
                path('', AboutProjectView.as_view(), name='Home'),

                # URLs for App_Query to handle Database Transactions
                # path('db/', include('App_Query.urls')),

                # URLs for App_Authentication to handle Authentication Transactions
                # path('auth/', include('App_Authentication.urls')),

                # URLs for App_Static_Content for any Static Pages
                path('s/', include('App_Static_Content.urls')),  # URLs for App_Static_Content
            ]
        }
        wsgi.py

    templates
    venv
    manage.py
    pathology_db.sql
    ReadMe.md